name: Deploy on ArgoCD

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string
        description: Application title displayed on ArgoCD interface

      argocd-destination-cluster:
        required: true
        type: string
        description: K8s cluster to deploy

      argocd-project:
        required: true
        type: string
        description: ArgoCD Project

      argocd-server-url:
        required: true
        type: string
        description: ArgoCD server url

      argocd-skip-sync:
        required: false
        type: boolean
        description: Should skip sync step
        default: false

      argocd-sync-timeout:
        required: false
        type: number
        description: ArgoCD sync timeout
        default: 300
      
      retry-limit:
        required: false
        type: number
        description: ArgoCD retry limit
        default: 3
      
      sync-policy:
        required: false
        type: string
        description: ArgoCD Sync Policy (manual,auto)
        default: manual

      auto-create-namespace:
        required: false
        type: boolean
        description: Enables Auto create namespace
        default: false
      
      auto-prune:
        required: false
        type: boolean
        description: Enables Prune Resources
        default: false
      
      async:
        required: false
        type: boolean
        description: Sync with async option
        default: false

      self-heal:
        required: false
        type: boolean
        description: Enables Self Heal
        default: false

      chart-path:
        required: true
        type: string
        description: Helm chart path

      environment:
        required: true
        type: string
        description: Environment

      git-runner-container:
        required: true
        type: string
        description: Github runner container

      image-tag:
        required: true
        type: string
        description: Docker image tag

      namespace:
        required: true
        type: string
        description: K8s namespace
        
      app-namespace:
        required: true
        type: string
        description: Argocd app namespace

      revision:
        required: false
        type: string
        description: Github ref
        default: HEAD

      repository-url:
        required: true
        type: string
        description: Github repository name

      run-migrations:
        required: false
        type: string
        description: Whether run migrations before or after deploy
        default: "pre-install,pre-upgrade"
      
      runs-on:
        required: false
        type: string
        description: Runner type
        default: ubuntu-22.04
      
      grpc-keep-alive-min:
        required: false
        type: string
        description: GRPC Keep Alive Min
        default: 20s

    secrets:
      ARGOCD_AUTH_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: ${{ inputs.git-runner-container }}
    env:
      # Token to communicate via argocd cli
      ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
      ARGOCD_GRPC_KEEP_ALIVE_MIN: ${{ inputs.grpc-keep-alive-min }}
    steps:
      - name: Create/Update application on ArgoCD
        shell: bash
        run: |
          command="argocd app create ${{ inputs.application-name }} \
            --app-namespace ${{ inputs.app-namespace }}
            --dest-namespace ${{ inputs.namespace }} \
            --dest-name ${{ inputs.argocd-destination-cluster }} \
            --helm-set image.tag=${{ inputs.image-tag }} \
            --helm-set run_migrations=${{ inputs.run-migrations }} \
            --path ${{ inputs.chart-path }} \
            --project ${{ inputs.argocd-project }} \
            --repo ${{ inputs.repository-url }} \
            --server ${{ inputs.argocd-server-url }} \
            --upsert \
            --grpc-web \
            --revision ${{ inputs.revision }} \
            --values values-${{ inputs.environment }}.yaml "

          if [ "${{ inputs.auto-create-namespace }}" == "true" ]; then
            command+=" --sync-option CreateNamespace=true "
          fi          

          if [ "${{ inputs.auto-prune }}" == "true" ]; then
            command+=" --auto-prune"
          fi
          
          if [ "${{ inputs.self-heal }}" == "true" ]; then
            command+=" --self-heal"
          fi
          
          command+=" --sync-policy ${{ inputs.sync-policy }}"

          echo "Upsert app: $command"
          eval $command

      - name: Wait for ArgoCD application to be healthy and synced
        if: inputs.argocd-skip-sync == false
        shell: bash
        run: |
          command="argocd app wait ${{ inputs.application-name }} \
            --server ${{ inputs.argocd-server-url }} \
            --app-namespace ${{ inputs.app-namespace }} \
            --health \
            --sync \
            --output tree \
            --timeout 600 \
            --grpc-web "

          echo "Wait app: $command"
          eval $command